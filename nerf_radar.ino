#include <Wire.h>
#include <Adafruit_SSD1306.h>

Adafruit_SSD1306 display(128, 32, &Wire, -1);
// 'Nerf-Logo', 128x32px
const unsigned char logo [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfb, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xf0, 0x07, 0x3f, 0x00, 0x03, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0xff, 0xf8, 0xfe, 0x0f, 0x80, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0x1f, 0xff, 0xcd, 0xfd, 0xf3, 0xf1, 0xff, 0x00, 0x00, 0x7f, 
  0xff, 0xff, 0xcf, 0xfe, 0xfd, 0xfc, 0xbf, 0x3f, 0x9b, 0xff, 0xfc, 0x3b, 0xf3, 0x80, 0x01, 0xff, 
  0xff, 0xff, 0xdf, 0xff, 0xbb, 0xf9, 0x7f, 0xff, 0x37, 0xe5, 0xfe, 0xef, 0xe4, 0x00, 0x0f, 0xff, 
  0xff, 0xff, 0xbf, 0xff, 0xef, 0xf5, 0xfc, 0xff, 0xdf, 0xcf, 0x7f, 0xdf, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x7f, 0x0f, 0xff, 0xcb, 0xf2, 0x0f, 0xbf, 0x9f, 0xc3, 0xf8, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0xfb, 0xff, 0x97, 0xff, 0xc0, 0x5f, 0xff, 0xf8, 0x00, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xfb, 0xf9, 0xfe, 0xff, 0x70, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf7, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf0, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

int trigPin1 = 9;
int echoPin1 = 10;

int trigPin2 = 2;
int echoPin2 = 3;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x32
      Serial.println(F("SSD1306 allocation failed")); 
      for(;;); // Don't proceed, loop forever
    }
  display.begin();
  display.clearDisplay();
  display.drawBitmap(0, 0, logo, 128, 32, WHITE);
  display.display();
  pinMode(echoPin1, INPUT);
  pinMode(trigPin1, OUTPUT);
  pinMode(echoPin2, INPUT);
  pinMode(trigPin2, OUTPUT);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  delay(2000);
}

void loop() {
  // put your main code here, to run repeatedly:
  int durationLeft;
  int distanceLeft;
  int durationRight;
  int distanceRight;
  digitalWrite(trigPin1, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin1, LOW);
  durationLeft = pulseIn(echoPin1, HIGH);
  distanceLeft = durationLeft * 0.034 / 2;
  digitalWrite(trigPin2, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin2, LOW);
  durationRight = pulseIn(echoPin2, HIGH);
  distanceRight = durationRight * 0.034 / 2;
  display.clearDisplay();
  display.drawLine(10, 0, 10, 32, WHITE);
  display.display();
  display.drawLine(120, 0, 120, 32, WHITE);
  display.display();
  display.setCursor(5, 20);
  display.print("Left");
  display.display();
  display.setCursor(105, 20);
  display.print("Right");
  display.display();
  int oledDistanceLeft = (distanceLeft) / 4;
  int oledDistanceRight = (distanceRight) / 4;
  display.drawLine(0, oledDistanceLeft, 128, oledDistanceLeft, WHITE);
  display.display();
  display.drawLine(0, oledDistanceRight, 128, oledDistanceRight, WHITE);
  display.display();
  delay(10);
}
